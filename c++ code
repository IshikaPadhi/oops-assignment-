#include <iostream>
#include <fstream>
#include <stdio.h>
using namespace std;
class Student
{
    char name[100];
    int rollNo;
    int total;

public:
    void input()
    {
        cout << "Enter name: ";
        cin >> name;
        cout << "Enter roll number: ";
        cin >> rollNo;
        cout << "Enter total marks out of 600: ";
        cin >> total;
    }

    void output()
    {
        cout << "Student details:\n";
        cout << "Name:" << name << endl
             << "Roll Number:" << rollNo << endl
             << "Total:" << total;
    }
};

class volume
{
    public:
float vol(int r, int h)
{
return (3.14 * r * r * h);
}
float vol(int l, int b, int h)
{
return (l * b * h);
}
float vol(int a)
{
return ((4.0 / 3.0) * 3.14 * a * a * a);
}
};
class Area
{
public:
    inline int square(int n)
    {
        return n * n;
    }
    inline int cube(int n)
    {
        return n * n * n;
    }
};
class Book
{
private:
    string name, Author;
    double price;

public:
    Book() {}
    Book(string n, string a, double p)
    {
        name = n;
        Author = a;
        price = p;
    }
    void set_Details(string n, string a, double p)
    {
        name = n;
        Author = a;
        price = p;
    }
    string getName()
    {
        return name;
    }
    string getAuthor()
    {
        return Author;
    }
    double getPrice()
    {
        return price;
    }
    void printBook()
    {
        cout << "The book name is:" << name << endl;
        cout << "The book author is:" << Author << endl;
        cout << "The book price is:" << price << endl;
    }
    friend void display_1(int x);
};
void display_1(int x)
{
    string name, Author;
    double price;

    Book arr[x];

    for (int i = 0; i < x; i++)
    {
        cout << "Enter the book name " << i + 1 << endl;
        cin >> name;
        cout << "Enter the author \n";
        cin >> Author;
        cout << "Enter the book price\n";
        cin >> price;
        arr[i].set_Details(name, Author, price);
    }
    for (int i = 0; i < x; i++)
    {
        cout << endl;
        cout << "Details of book " << (i + 1) << "are:\n";

        arr[i].printBook();
    }
}
class Time
{
private:
    int hours;
    int minutes;

public:
    Time()
    { 
        hours = 0;
        minutes = 0;
    }
    Time(int h, int m = 0)
    { 
        hours = h;
        minutes = m;
    }
    void display_2()
    {
        hours = hours + (minutes / 60);
        minutes = minutes % 60;
        cout << "TIME:  ";
        cout << hours << ":" << minutes << endl;
    }
};
class Shape
{
public:
    virtual void area_3() = 0;
};
class circle : public Shape
{
    float r;

public:
    void area_3()
    {
        cout << "\n Enter radius : ";
        cin >> r;
        cout << "\n Area of circle : " << (3.14 * r * r);
    }
};
class rectangle : public Shape
{
    int l, b;

public:
    void area_3()
    {
        cout << "\n Enter length : ";
        cin >> l;
        cout << "\n Enter breadth : ";
        cin >> b;
        cout << "\n Area of rectangle : " << l * b;
    }
};
class triangle : public Shape
{

    int h, b;
    float a;

public:
    void area_3()
    {
        cout << "\nEnter height : ";
        cin >> h;
        cout << "\nEnter breadth : ";
        cin >> b;
        a = 0.5 * h * b;
        cout << "\nArea of triangle : " << a;
    }
};
class Complex
{
private:
    int real, imag;

public:
    Complex(int r = 0, int i = 0)
    {
        real = r;
        imag = i;
    }
    friend ostream &operator<<(ostream &out, const Complex &c);
    friend istream &operator>>(istream &in, Complex &c);
    Complex operator++()
    {
        ++real;
        return real;
    }
    Complex operator++(int)
    {
        real++;
        return real;
    }
};

ostream &operator<<(ostream &out, const Complex &c)
{
    out << c.real;
    out << "+" << c.imag << "i" << endl;
    return out;
}

istream &operator>>(istream &in, Complex &c)
{
    cout << "Enter Real Part ";
    in >> c.real;
    cout << "Enter Imaginary Part ";
    in >> c.imag;
    return in;
}
class Base
{
    int x;

public:
    virtual void fun() = 0;
    int getX() { return x; }
};

// This class inherits from Base and implements fun()
class Derived : public Base
{
    int y;

public:
    void fun() { cout << "fun() called"; }
};
void file_4()
{
    char fileName[50], ch;
    fstream fp;
    cout << "Enter the Name of File: ";
    gets(fileName);
    fp.open(fileName, fstream::in);
    if (!fp)
    {
        cout << "\nError Occurred!";
    }
    cout << "\nContent of " << fileName << ":-\n";
    while (fp >> noskipws >> ch)
        cout << ch;
    fp.close();
    cout << endl;
}

int main()
{
    int n, s;
    cout << "\n1.CLASS AND OBJECT"
         << "\n2.FUNCTION OVERLOADING"
         << "\n3.INLINE FUNCTION"
         << "\n4.FRIEND FUNCTION"
         << "\n5.CONSTRUCTORS AND DESTRUCTORS"
         << "\n6.INHERITANCE"
         << "\n7.OPERATOR OVERLOADING"
         << "\n8.VIRTUAL FUNCTION"
         << "\n9.FILE HANDLING";
    cout << "\nENTER YOUR CHOICE:";
    cin >> s;
    switch (s)
    {
    case 1:
        Student s;
        s.input();
        s.output();
        break;
 case 2:

  volume v;
cout << "Volume of cylinder is " << v.vol(2, 4);
cout << "\nVolume of cuboid is " << v.vol(5, 10, 15);
cout << "\nVolume of sphere is " << v.vol(7);
break;

    case 3:
        int n, r3;
        Area p;
        cout << "\nEnter a no: \n";
        cin >> n;
        r3 = p.square(n);
        cout << "\nSquare of " << n << " = " << r3 << endl;
        r3 = p.cube(n);
        cout << "\nCube of " << n << " = " << r3 << endl;
        break;
    case 4:
        int x;
        cout << "Enter the number of books\n";
        cin >> x;
        display_1(x);
        break;
    case 5:
    {
        int hours, mins;
        cout << "Enter the value of hours :" << endl;
        cin >> hours;
        cout << "Enter the value of minutes :" << endl;
        cin >> mins;
        Time time1(hours, mins);
        time1.display_2();
        break;
    }
    case 6:
    {
        circle c;
        c.area_3();
        rectangle q;
        q.area_3();
        triangle t;
        t.area_3();
        break;
    }
    case 7:
    {
        Complex c1;
        cin >> c1;
        cout << "The complex object is ";
        cout << c1;
        cout << " Post Incremented value is:" << c1++;
        cout << " Pre Incremented value is:" << ++c1;
        break;
    }
    case 8:
    {
        Base *b;
        Derived d;
        b = &d;
        b->fun();
    }
    case 9:
    {
        file_4();
        break;
    }
    }
    return 0;
}
